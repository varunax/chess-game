from piece import Piece, Rook, Knight, Bishop, Queen, King, Pawnclass Board:    # Variables    og_grid = []    grid = []    black_pieces = [        Rook('R', 'Black'),        Knight('N', 'Black'),        Bishop('B', 'Black'),        Queen('Q', 'Black'),        King('K', 'Black'),        Bishop('B', 'Black'),        Knight('N', 'Black'),        Rook('R', 'Black'),        Pawn('P', 'Black'),        Pawn('P', 'Black'),        Pawn('P', 'Black'),        Pawn('P', 'Black'),        Pawn('P', 'Black'),        Pawn('P', 'Black'),        Pawn('P', 'Black'),        Pawn('P', 'Black')    ]    white_pieces = [        Pawn('P', 'White'),        Pawn('P', 'White'),        Pawn('P', 'White'),        Pawn('P', 'White'),        Pawn('P', 'White'),        Pawn('P', 'White'),        Pawn('P', 'White'),        Pawn('P', 'White'),        Rook('R', 'White'),        Knight('N', 'White'),        Bishop('B', 'White'),        Queen('Q', 'White'),        King('K', 'White'),        Bishop('B', 'White'),        Knight('N', 'White'),        Rook('R', 'White')    ]    # Constructor    def __init__(self):        self.og_grid = self.initialize_board()        self.grid = self.initialize_board()        # Setup Black Pieces.        k = 0        for i in range(2):            for j in range(8):                self.black_pieces[k].x = i                self.black_pieces[k].y = j                self.grid[i][j] = self.black_pieces[k]                k += 1        k = 0        # Setup White Pieces.        for i in range(6, 8):            for j in range(8):                self.white_pieces[k].x = i                self.white_pieces[k].y = j                self.grid[i][j] = self.white_pieces[k]                k += 1    def initialize_board(self):        grid = []        # The char . is white.        # The char , is black.        for i in range(8):            row = []            for j in range(8):                if i % 2 == 0 and \                        j % 2 == 0:                    tile = Piece('.', '')                    tile.x = i                    tile.y = j                    row.append(tile)                if i % 2 == 0 and \                        j % 2 != 0:                    tile = Piece(',', '')                    tile.x = i                    tile.y = j                    row.append(tile)                if i % 2 != 0 and \                        j % 2 == 0:                    tile = Piece(',', '')                    tile.x = i                    tile.y = j                    row.append(tile)                if i % 2 != 0 and \                        j % 2 != 0:                    tile = Piece('.', '')                    tile.x = i                    tile.y = j                    row.append(tile)            grid.append(row)        return grid    def parse_move(self, move):        row = 8 - int(move[1])        col = 0        chars = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']        index = 0        for i in range(len(chars)):            if move[0] == chars[i]:                break            index += 1        col = index        coords = [row, col]        return coords    def make_move(self, src, dest):        coord_src = self.parse_move(src)        coord_dest = self.parse_move(dest)        piece = self.grid[coord_src[0]][coord_src[1]]        if self.is_valid_move(src, dest, piece):            self.grid[coord_dest[0]][coord_dest[1]] = piece            self.grid[coord_src[0]][coord_src[1]] = self.og_grid[coord_src[0]][coord_src[1]]    def is_valid_move(self, src, dest, piece):        coord_src = self.parse_move(src)        coord_dest = self.parse_move(dest)        if isinstance(piece, Pawn) and piece.color == 'Black':            ahead = self.grid[coord_src[0] + 1][coord_src[1]]            adj_left = self.grid[coord_src[0] + 1][coord_src[1] - 1]            adj_right = self.grid[coord_src[0] + 1][coord_src[1] + 1]            print('x: ' + str(ahead.x) + " y:" + str(ahead.y))            print('x: ' + str(coord_dest[0]) + " y:" + str(coord_dest[1]))            if ahead.symbol == '.' or \                    ahead.symbol == ',':                if coord_dest[0] == ahead.x and \                        coord_dest[1] == ahead.y:                    piece.x = coord_dest[0]                    piece.y = coord_dest[1]                    return True                else:                    print('Not a valid move.')            elif adj_left.symbol != '.' and \                    adj_left.symbol != ',':                if coord_dest[0] == adj_left.x and \                        coord_dest[1] == adj_left.y:                    piece.x = coord_dest[0]                    piece.y = coord_dest[1]                    return True                else:                    print('Not a valid move.')            elif adj_right.symbol != '.' and \                    adj_right.symbol != ',':                if coord_dest[0] == adj_right.x and \                        coord_dest[1] == adj_right.y:                    piece.x = coord_dest[0]                    piece.y = coord_dest[1]                    return True                else:                    print('Not a valid move.')        if isinstance(piece, Pawn) and piece.color == 'Black':            ahead = self.grid[coord_src[0] + 1][coord_src[1]]            adj_left = self.grid[coord_src[0] + 1][coord_src[1] - 1]            adj_right = self.grid[coord_src[0] + 1][coord_src[1] + 1]            print('x: ' + str(adj_right.x) + " y:" + str(adj_right.y))            print('x: ' + str(coord_dest[0]) + " y:" + str(coord_dest[1]))            if ahead.symbol == '.' or \                    ahead.symbol == ',':                if coord_dest[0] == ahead.x and \                        coord_dest[1] == ahead.y:                    piece.x = coord_dest[0]                    piece.y = coord_dest[1]                    return True                else:                    print('Not a valid move.')            if adj_left.symbol != '.' and \                    adj_left.symbol != ',':                if coord_dest[0] == adj_left.x and \                        coord_dest[1] == adj_left.y:                    piece.x = coord_dest[0]                    piece.y = coord_dest[1]                    return True                else:                    print('Not a valid move.')            if adj_right.symbol != '.' and \                    adj_right.symbol != ',':                if coord_dest[0] == adj_right.x and \                        coord_dest[1] == adj_right.y:                    piece.x = coord_dest[0]                    piece.y = coord_dest[1]                    return True                else:                    print('Not a valid move.')        if isinstance(piece, Pawn) and piece.color == 'White':            ahead = self.grid[coord_src[0] - 1][coord_src[1]]            adj_left = self.grid[coord_src[0] - 1][coord_src[1] - 1]            adj_right = self.grid[coord_src[0] - 1][coord_src[1] + 1]            print('x: ' + str(ahead.x) + " y:" + str(ahead.y))            print('x: ' + str(coord_dest[0]) + " y:" + str(coord_dest[1]))            if ahead.symbol == '.' or \                    ahead.symbol == ',':                if coord_dest[0] == ahead.x and \                        coord_dest[1] == ahead.y:                    piece.x = coord_dest[0]                    piece.y = coord_dest[1]                    return True                else:                    print('Not a valid move.')            elif adj_left.symbol != '.' and \                    adj_left.symbol != ',':                if coord_dest[0] == adj_left.x and \                        coord_dest[1] == adj_left.y:                    piece.x = coord_dest[0]                    piece.y = coord_dest[1]                    return True                else:                    print('Not a valid move.')            elif adj_right.symbol != '.' and \                    adj_right.symbol != ',':                if coord_dest[0] == adj_right.x and \                        coord_dest[1] == adj_right.y:                    piece.x = coord_dest[0]                    piece.y = coord_dest[1]                    return True                else:                    print('Not a valid move.')        return False    def print_board(self):        the_cols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']        for i in range(9):            m = 0            if i != 0:                print('  +---+---+---+---+---+---+---+---+')                print(str(9 - i) + ' ', end='')            else:                print('  ', end='')            for j in range(8):                if i != 0:                    piece = self.grid[i - 1][j]                    if isinstance(self.grid[i - 1][j], Piece):                        piece = self.grid[i - 1][j].symbol                    print('| ' + piece + ' ', end='')                    if j == 7:                        print('|')                else:                    print('  ' + the_cols[m] + ' ', end='')                    m += 1                    if j == 7:                        print()        print('  +---+---+---+---+---+---+---+---+')